--Query to see CPU consumption over the last 24 hours:
SELECT 
    DATEADD(minute, -(sample_ms % 3600000) / 60000, 
        DATEADD(ms, sample_ms, '1970-01-01')) AS sample_time,
    SUM(cpu_time_total) / 3600000.0 AS cpu_hours
FROM sys.dm_os_ring_buffers
WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
    AND record_time > DATEADD(hour, -24, GETDATE())
GROUP BY (sample_ms % 3600000) / 60000
ORDER BY sample_time;


--Query to check top CPU queries:
SELECT TOP 10
    qs.execution_count,
    qs.total_worker_time/1000 AS total_cpu_ms,
    qs.total_elapsed_time/1000 AS total_duration_ms,
    SUBSTRING(st.text, (qs.statement_start_offset/2)+1, 
        ((CASE qs.statement_end_offset 
            WHEN -1 THEN DATALENGTH(st.text)
            ELSE qs.statement_end_offset 
        END - qs.statement_start_offset)/2) + 1) AS query_text,
    DB_NAME(st.dbid) AS database_name
FROM sys.dm_exec_query_stats qs
CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) st
ORDER BY qs.total_worker_time DESC;


--Query to check missing indexes ordered by importance:
SELECT 
    mig.index_group_handle,
    mid.index_handle,
    migs.avg_total_user_cost * migs.avg_user_impact * migs.user_seeks AS improvement_measure,
    mid.database_id,
    DB_NAME(mid.database_id) AS database_name,
    OBJECT_NAME(mid.object_id, mid.database_id) AS table_name,
    mid.equality_columns,
    mid.inequality_columns,
    mid.included_columns,
    migs.user_seeks,
    migs.user_scans,
    migs.avg_total_user_cost,
    migs.avg_user_impact
FROM sys.dm_db_missing_index_groups mig
JOIN sys.dm_db_missing_index_group_stats migs 
    ON migs.group_handle = mig.index_group_handle
JOIN sys.dm_db_missing_index_details mid 
    ON mig.index_handle = mid.index_handle
WHERE migs.avg_total_user_cost * migs.avg_user_impact * migs.user_seeks > 0
ORDER BY improvement_measure DESC;


--Query to check all backups over the last 7 days:
SELECT 
    bs.database_name,
    bs.backup_start_date,
    bs.backup_finish_date,
    CASE bs.type
        WHEN 'D' THEN 'Database'
        WHEN 'I' THEN 'Differential'
        WHEN 'L' THEN 'Log'
        ELSE 'Other'
    END AS backup_type,
    bm.physical_device_name,
    bs.backup_size/1024/1024 AS backup_size_mb
FROM msdb.dbo.backupset bs
JOIN msdb.dbo.backupmediafamily bm 
    ON bs.media_set_id = bm.media_set_id
WHERE bs.backup_start_date > DATEADD(day, -7, GETDATE())
ORDER BY bs.backup_start_date DESC;


--Query to check CPU consumption by Database:
SELECT 
    DB_NAME(pa.database_id) AS database_name,
    SUM(qs.total_worker_time)/1000 AS total_cpu_ms,
    COUNT(DISTINCT qs.plan_handle) AS unique_plans,
    SUM(qs.execution_count) AS total_executions
FROM sys.dm_exec_query_stats qs
CROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) pa
WHERE pa.attribute = 'dbid'
    AND qs.last_execution_time > DATEADD(hour, -24, GETDATE())
GROUP BY pa.database_id
HAVING SUM(qs.total_worker_time) > 0
ORDER BY total_cpu_ms DESC;


--Query to check memory by Database:
SELECT 
    DB_NAME(database_id) AS database_name,
    COUNT(*) * 8.0 / 1024 AS memory_used_mb,
    SUM(CAST(free_space_in_bytes AS bigint)) / (1024.0 * 1024.0) AS free_memory_mb,
    CASE WHEN database_id = 2 THEN 'TempDB' 
        ELSE 'Other' 
    END AS database_type
FROM sys.dm_os_buffer_descriptors
WHERE database_id > 4  -- Exclude system databases except TempDB
GROUP BY database_id
ORDER BY memory_used_mb DESC;


--Query to Check Wait Statistics (Identify Bottlenecks)
SELECT 
    wait_type,
    waiting_tasks_count,
    wait_time_ms,
    max_wait_time_ms,
    wait_time_ms / NULLIF(waiting_tasks_count, 0) AS avg_wait_time_ms,
    signal_wait_time_ms
FROM sys.dm_os_wait_stats
WHERE waiting_tasks_count > 0
    AND wait_type NOT LIKE '%SLEEP%'
    AND wait_type NOT LIKE '%IDLE%'
ORDER BY wait_time_ms DESC;

--Purpose: Identifies what the SQL Server is waiting on, helping pinpoint resource contention (e.g., CPU, I/O, locks).

--Query to Check I/O Performance by File
SELECT 
    DB_NAME(mf.database_id) AS database_name,
    mf.physical_name,
    vfs.num_of_reads,
    vfs.num_of_writes,
    vfs.io_stall_read_ms,
    vfs.io_stall_write_ms,
    vfs.num_of_bytes_read / 1024.0 / 1024 AS read_mb,
    vfs.num_of_bytes_written / 1024.0 / 1024 AS written_mb,
    vfs.io_stall / NULLIF(vfs.num_of_reads + vfs.num_of_writes, 0) AS avg_io_stall_ms
FROM sys.dm_io_virtual_file_stats(NULL, NULL) vfs
JOIN sys.master_files mf 
    ON vfs.database_id = mf.database_id 
    AND vfs.file_id = mf.file_id
ORDER BY vfs.io_stall DESC;

--Purpose: Shows I/O latency and throughput per database file, useful for identifying slow disk subsystems.

--Query to Check Expensive Cached Plans
SELECT 
    qs.execution_count,
    qs.total_logical_reads,
    qs.total_physical_reads,
    qs.total_worker_time / 1000 AS total_cpu_ms,
    SUBSTRING(st.text, (qs.statement_start_offset/2) + 1, 
        ((CASE qs.statement_end_offset 
            WHEN -1 THEN DATALENGTH(st.text)
            ELSE qs.statement_end_offset 
        END - qs.statement_start_offset)/2) + 1) AS query_text,
    qp.query_plan,
    DB_NAME(st.dbid) AS database_name
FROM sys.dm_exec_query_stats qs
CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) st
CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle) qp
WHERE qs.execution_count > 10
ORDER BY qs.total_logical_reads DESC
TOP 10;

--Purpose: Identifies cached query plans with high resource usage (reads, CPU), including the actual execution plan for analysis.

--Query to Check Index Usage Statistics
SELECT 
    DB_NAME(ius.database_id) AS database_name,
    OBJECT_NAME(ius.object_id, ius.database_id) AS table_name,
    i.name AS index_name,
    ius.user_seeks,
    ius.user_scans,
    ius.user_lookups,
    ius.user_updates,
    ius.last_user_seek,
    ius.last_user_scan
FROM sys.dm_db_index_usage_stats ius
JOIN sys.indexes i 
    ON ius.object_id = i.object_id 
    AND ius.index_id = i.index_id
WHERE ius.database_id > 4  -- Exclude system databases
    AND ius.user_seeks + ius.user_scans + ius.user_lookups > 0
ORDER BY ius.user_updates DESC, ius.user_seeks + ius.user_scans ASC;

--Purpose: Shows how indexes are being used (or not used), helping identify unused or maintenance-heavy indexes.

--Query to Check Blocking Sessions
SELECT 
    blocking_session_id AS blocking_spid,
    session_id AS blocked_spid,
    wait_type,
    wait_time / 1000.0 AS wait_time_seconds,
    wait_resource,
    DB_NAME(er.database_id) AS database_name,
    SUBSTRING(st.text, (er.statement_start_offset/2) + 1, 
        ((CASE er.statement_end_offset 
            WHEN -1 THEN DATALENGTH(st.text)
            ELSE er.statement_end_offset 
        END - er.statement_start_offset)/2) + 1) AS blocked_query
FROM sys.dm_exec_requests er
CROSS APPLY sys.dm_exec_sql_text(er.sql_handle) st
WHERE blocking_session_id > 0
ORDER BY wait_time DESC;

--Purpose: Identifies current blocking sessions, their wait times, and the queries involved.


--Query to Check TempDB Usage
SELECT 
    SUM(unallocated_extent_page_count) * 8.0 / 1024 AS free_space_mb,
    SUM(version_store_reserved_page_count) * 8.0 / 1024 AS version_store_mb,
    SUM(internal_object_reserved_page_count) * 8.0 / 1024 AS internal_objects_mb,
    SUM(user_object_reserved_page_count) * 8.0 / 1024 AS user_objects_mb
FROM sys.dm_db_file_space_usage
WHERE database_id = 2;  -- TempDB

SELECT 
    tsu.session_id,
    tsu.request_id,
    SUM(tsu.user_objects_alloc_page_count) * 8.0 / 1024 AS user_objects_mb,
    SUM(tsu.internal_objects_alloc_page_count) * 8.0 / 1024 AS internal_objects_mb,
    es.login_name,
    es.program_name
FROM sys.dm_db_task_space_usage tsu
JOIN sys.dm_exec_sessions es 
    ON tsu.session_id = es.session_id
WHERE tsu.user_objects_alloc_page_count > 0 
    OR tsu.internal_objects_alloc_page_count > 0
GROUP BY tsu.session_id, tsu.request_id, es.login_name, es.program_name
ORDER BY user_objects_mb DESC;

--Purpose: Monitors TempDB space usage and identifies sessions consuming TempDB resources.

--Query to Check Long-Running Queries
SELECT 
    er.session_id,
    er.start_time,
    DATEDIFF(second, er.start_time, GETDATE()) AS duration_seconds,
    er.status,
    er.command,
    DB_NAME(er.database_id) AS database_name,
    SUBSTRING(st.text, (er.statement_start_offset/2) + 1, 
        ((CASE er.statement_end_offset 
            WHEN -1 THEN DATALENGTH(st.text)
            ELSE er.statement_end_offset 
        END - er.statement_start_offset)/2) + 1) AS query_text,
    er.total_elapsed_time / 1000 AS total_elapsed_ms
FROM sys.dm_exec_requests er
CROSS APPLY sys.dm_exec_sql_text(er.sql_handle) st
WHERE er.session_id > 50  -- Exclude system sessions
    AND er.total_elapsed_time > 10000  -- Running > 10 seconds
ORDER BY er.total_elapsed_time DESC;

--Query to Show Tables Ordered by Size (Largest First)
SELECT 
    s.name AS schema_name,
    t.name AS table_name,
    SUM(p.rows) AS row_count,
    SUM(CAST(a.total_pages AS bigint) * 8) / 1024.0 AS total_size_mb,
    SUM(CAST(a.used_pages AS bigint) * 8) / 1024.0 AS used_size_mb,
    SUM(CAST(a.data_pages AS bigint) * 8) / 1024.0 AS data_size_mb,
    (SUM(CAST(a.total_pages AS bigint) - CAST(a.used_pages AS bigint)) * 8) / 1024.0 AS free_size_mb
FROM sys.tables t
JOIN sys.schemas s 
    ON t.schema_id = s.schema_id
JOIN sys.indexes i 
    ON t.object_id = i.object_id
JOIN sys.partitions p 
    ON i.object_id = p.object_id 
    AND i.index_id = p.index_id
JOIN sys.allocation_units a 
    ON p.partition_id = a.container_id
WHERE t.is_ms_shipped = 0  -- Exclude system tables
GROUP BY s.name, t.name
ORDER BY total_size_mb DESC;

--Purpose: Lists all user tables with their sizes (total, used, data, and free space) in MB, ordered by total size descending.
--Notes: Includes both data and index sizes; page size is 8 KB.

--Query to Show Filegroup Consumption
SELECT 
    fg.name AS filegroup_name,
    f.name AS file_name,
    f.physical_name,
    (f.size * 8.0) / 1024 AS total_size_mb,
    (CAST(FILEPROPERTY(f.name, 'SpaceUsed') AS bigint) * 8.0) / 1024 AS used_size_mb,
    ((f.size - CAST(FILEPROPERTY(f.name, 'SpaceUsed') AS bigint)) * 8.0) / 1024 AS free_size_mb,
    vfs.num_of_reads,
    vfs.num_of_writes,
    vfs.io_stall_read_ms,
    vfs.io_stall_write_ms
FROM sys.filegroups fg
LEFT JOIN sys.master_files f 
    ON fg.data_space_id = f.data_space_id
LEFT JOIN sys.dm_io_virtual_file_stats(DB_ID(), NULL) vfs 
    ON f.file_id = vfs.file_id 
    AND f.database_id = vfs.database_id
WHERE f.database_id = DB_ID()  -- Current database
ORDER BY fg.name, f.name;

--Purpose: Shows space usage and I/O statistics for each file within each filegroup in the current database.
--Notes: Sizes are in MB; includes I/O metrics from sys.dm_io_virtual_file_stats for performance insights.

--Query to List All Applications That Connect to the Database, Ordered by Last Login (Recent First)
SELECT 
    es.program_name,
    es.client_interface_name,
    es.login_name,
    DB_NAME(es.database_id) AS database_name,
    es.host_name,
    es.last_request_end_time AS last_login_time,
    COUNT(*) AS session_count
FROM sys.dm_exec_sessions es
WHERE es.is_user_process = 1  -- User sessions only
    AND es.database_id = DB_ID()  -- Current database
GROUP BY 
    es.program_name,
    es.client_interface_name,
    es.login_name,
    es.database_id,
    es.host_name,
    es.last_request_end_time
ORDER BY es.last_request_end_time DESC;

--Purpose: Lists applications (via program_name), their connection details, and the most recent activity time for the current database.

--Query to Show Table Fragmentation (Related to Table Sizes)
SELECT 
    s.name AS schema_name,
    t.name AS table_name,
    i.name AS index_name,
    ips.index_type_desc,
    ips.avg_fragmentation_in_percent,
    ips.fragment_count,
    ips.avg_fragment_size_in_pages,
    ips.page_count,
    (ips.page_count * 8.0) / 1024 AS index_size_mb
FROM sys.dm_db_index_physical_stats(DB_ID(), NULL, NULL, NULL, 'LIMITED') ips
JOIN sys.tables t 
    ON ips.object_id = t.object_id
JOIN sys.schemas s 
    ON t.schema_id = s.schema_id
JOIN sys.indexes i 
    ON ips.object_id = i.object_id 
    AND ips.index_id = i.index_id
WHERE ips.index_id > 0  -- Exclude heaps
    AND ips.avg_fragmentation_in_percent > 10  -- Show fragmented indexes
ORDER BY ips.avg_fragmentation_in_percent DESC;

--Purpose: Identifies fragmentation levels for indexes on tables, complementing table size data by showing potential performance impacts.
--Notes: Use 'LIMITED' mode for quick scans; higher fragmentation may suggest a need for index maintenance (e.g., REBUILD or REORGANIZE).

--Query to Show Filegroup Growth Trends (Related to Filegroup Consumption)
SELECT 
    fg.name AS filegroup_name,
    f.name AS file_name,
    f.physical_name,
    (f.size * 8.0) / 1024 AS current_size_mb,
    (f.growth * 8.0) / 1024 AS growth_increment_mb,
    CASE f.is_percent_growth
        WHEN 1 THEN CAST(f.growth AS varchar(10)) + '%'
        ELSE CAST((f.growth * 8.0) / 1024 AS varchar(10)) + ' MB'
    END AS growth_setting,
    vfs.num_of_bytes_written / 1024.0 / 1024 AS total_written_mb
FROM sys.filegroups fg
JOIN sys.master_files f 
    ON fg.data_space_id = f.data_space_id
JOIN sys.dm_io_virtual_file_stats(DB_ID(), NULL) vfs 
    ON f.file_id = vfs.file_id 
    AND f.database_id = vfs.database_id
WHERE f.database_id = DB_ID()
ORDER BY fg.name, f.name;

--Purpose: Provides details on filegroup file sizes, autogrowth settings, and total bytes written, helping predict storage needs.
--Notes: High total_written_mb with small growth increments might indicate frequent autogrowth events, impacting performance.

--Query to Show Connection Resource Usage by Application (Related to Application Connections)
SELECT 
    es.program_name,
    es.login_name,
    DB_NAME(es.database_id) AS database_name,
    COUNT(*) AS active_sessions,
    SUM(CAST(es.total_scheduled_time AS bigint)) / 1000 AS total_cpu_ms,
    SUM(CAST(es.total_elapsed_time AS bigint)) / 1000 AS total_duration_ms,
    SUM(es.reads) AS total_reads,
    SUM(es.writes) AS total_writes,
    MAX(es.last_request_end_time) AS last_activity
FROM sys.dm_exec_sessions es
WHERE es.is_user_process = 1  -- User sessions only
    AND es.database_id = DB_ID()  -- Current database
GROUP BY es.program_name, es.login_name, es.database_id
ORDER BY last_activity DESC;

--Purpose: Aggregates resource usage (CPU, I/O, duration) by application and login, showing which apps are most active or resource-intensive.
--Notes: Useful for identifying heavy users or misbehaving applications.

--Query to Show Partitioned Table Sizes (Enhancing Table Size Insights)
SELECT 
    s.name AS schema_name,
    t.name AS table_name,
    fg.name AS filegroup_name,
    p.partition_number,
    SUM(p.rows) AS row_count,
    SUM(CAST(a.total_pages AS bigint) * 8) / 1024.0 AS total_size_mb,
    SUM(CAST(a.used_pages AS bigint) * 8) / 1024.0 AS used_size_mb
FROM sys.tables t
JOIN sys.schemas s 
    ON t.schema_id = s.schema_id
JOIN sys.indexes i 
    ON t.object_id = i.object_id
JOIN sys.partitions p 
    ON i.object_id = p.object_id 
    AND i.index_id = p.index_id
JOIN sys.allocation_units a 
    ON p.partition_id = a.container_id
JOIN sys.filegroups fg 
    ON a.data_space_id = fg.data_space_id
WHERE t.is_ms_shipped = 0
    AND p.partition_number > 1  -- Focus on partitioned tables
GROUP BY s.name, t.name, fg.name, p.partition_number
ORDER BY total_size_mb DESC;

--Purpose: Breaks down table sizes by partition and filegroup, useful if you use table partitioning.
--Notes: Omit the p.partition_number > 1 filter to include non-partitioned tables.

--Query to Show Database File Latency (Related to Filegroup Consumption)
SELECT 
    fg.name AS filegroup_name,
    f.name AS logical_file_name,
    f.physical_name,
    vfs.num_of_reads,
    vfs.num_of_writes,
    vfs.io_stall_read_ms / NULLIF(vfs.num_of_reads, 0) AS avg_read_latency_ms,
    vfs.io_stall_write_ms / NULLIF(vfs.num_of_writes, 0) AS avg_write_latency_ms,
    (vfs.io_stall_read_ms + vfs.io_stall_write_ms) / 
        NULLIF(vfs.num_of_reads + vfs.num_of_writes, 0) AS avg_io_latency_ms
FROM sys.filegroups fg
JOIN sys.master_files f 
    ON fg.data_space_id = f.data_space_id
JOIN sys.dm_io_virtual_file_stats(DB_ID(), NULL) vfs 
    ON f.file_id = vfs.file_id 
    AND f.database_id = vfs.database_id
WHERE f.database_id = DB_ID()
    AND (vfs.num_of_reads > 0 OR vfs.num_of_writes > 0)
ORDER BY avg_io_latency_ms DESC;

--Purpose: Highlights I/O latency per file, helping identify storage bottlenecks tied to filegroups.
--Notes: High latency might indicate disk performance issues.

--Query to Show Application Connection History (Enhancing Application Connections)
SELECT 
    ec.client_net_address,
    es.program_name,
    es.login_name,
    DB_NAME(ec.database_id) AS database_name,
    MAX(ec.connect_time) AS last_connect_time,
    COUNT(*) AS connection_count,
    SUM(CAST(ec.total_bytes_received AS bigint)) / 1024.0 AS total_received_kb,
    SUM(CAST(ec.total_bytes_sent AS bigint)) / 1024.0 AS total_sent_kb
FROM sys.dm_exec_connections ec
JOIN sys.dm_exec_sessions es 
    ON ec.session_id = es.session_id
WHERE es.is_user_process = 1
    AND ec.database_id = DB_ID()
GROUP BY ec.client_net_address, es.program_name, es.login_name, ec.database_id
ORDER BY last_connect_time DESC;

--Purpose: Tracks connection history by client IP, application, and login, including data transfer metrics.
--Notes: Useful for auditing or identifying unusual connection patterns.

